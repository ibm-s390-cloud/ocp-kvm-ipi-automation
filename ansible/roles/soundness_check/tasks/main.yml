---

- name: ensure the targeted KVM host is running a supported OS
  block:
    - name: check if running a Red Hat-based OS in general
      ansible.builtin.assert:
        that:
          - "ansible_os_family == 'RedHat'"

    - name: check RHEL prerequisites
      when: "ansible_distribution == 'RedHat'"
      block:
        - name: ensure that the major RHEL version is either 8 or 9
          ansible.builtin.assert:
            that:
              - '{{ ansible_distribution_major_version is inlist(["8", "9"]) }}'

        - name: ensure that the minor version for RHEL 8 is 4, 5, 6 or 7
          when: "ansible_distribution_major_version == '8'"
          ansible.builtin.assert:
            that:
              - '{{ (ansible_distribution_version | parse_version)["minor"] | string is inlist(["4", "5", "6", "7"]) }}'

        - name: ensure that the minor version for RHEL 9 is 0 or 1
          when: "ansible_distribution_major_version == '9'"
          ansible.builtin.assert:
            that:
              - '{{ (ansible_distribution_version | parse_version)["minor"] | string is inlist(["0", "1"]) }}'

    - name: check Fedora prerequisites
      when: "ansible_distribution == 'Fedora'"
      block:
        - name: ensure that the major Fedora version is 35, 36 or 37
          ansible.builtin.assert:
            that:
              - '{{ ansible_distribution_major_version is inlist(["35", "36", "37"]) }}'

- name: ensure the targeted KVM host architecture is supported by KVM (RHEL only)
  when: "ansible_distribution == 'RedHat'"
  block:
    - name: RHEL 8 supports KVM on s390x / ppc64le / x86_64 / aarch64
      when: "ansible_distribution_major_version == '8'"
      ansible.builtin.assert:
        that:
          - '{{ ansible_architecture is inlist(["s390x", "ppc64le", "x86_64", "aarch64"]) }}'

    - name: RHEL 9 supports KVM on s390x / x86_64
      when: "ansible_distribution_major_version == '9'"
      ansible.builtin.assert:
        that:
          - '{{ ansible_architecture is inlist(["s390x", "x86_64"]) }}'
        fail_msg: |-
          "The KVM host architecture is not supported by RHEL 9."
          "For more information please refer to the following document:"
          "https://ibm.biz/BdPYsd"

- name: check if mandatory configuration variables are set
  block:
    - name: check for common configuration variables
      ansible.builtin.assert:
        that: '{{ item }}'
      loop:
        - cluster_base_domain is defined and cluster_base_domain | trim | length > 0
        - cluster_name is defined and cluster_base_domain | trim | length > 0
        - openshift_master_root_volume_size is defined and openshift_master_root_volume_size | int > 0
        - openshift_master_number_of_cpus is defined and openshift_master_number_of_cpus | int > 0
        - openshift_master_memory_size is defined and openshift_master_memory_size | int > 0
        - openshift_worker_root_volume_size is defined and openshift_worker_root_volume_size | int > 0
        - openshift_worker_number_of_cpus is defined and openshift_worker_number_of_cpus | int > 0
        - openshift_worker_memory_size is defined and openshift_worker_memory_size | int > 0
        - openshift_release_url is defined and openshift_release_url | trim | length > 0
        - openshift_rhcos_image_url is defined and openshift_rhcos_image_url | trim | length > 0

    - name: check if the number of cluster workers is set properly (if applicable)
      when: cluster_number_of_masters is undefined
      ansible.builtin.assert:
        that:
          - 'cluster_number_of_workers is defined and cluster_number_of_workers | int > 0'

    - name: check if the number of cluster masters is set properly (if applicable)
      when: cluster_number_of_masters is defined
      ansible.builtin.assert:
        that:
          - 'cluster_number_of_masters | int == 1'
          - 'cluster_number_of_workers | int == 0'

- name: ensure KVM host is capable of fulfilling requested cluster configuration hardware demands
  block:
    - name: fetch disk space information of libvirt location on the KVM host
      ansible.builtin.shell:
        cmd: 'test -d /var/lib/libvirt/openshift-images && df -B1 --output=avail /var/lib/libvirt/openshift-images || df -B1 --output=avail /var/lib'
      register: libvirt_df_result

    - name: set libvirt_free_space fact
      ansible.builtin.set_fact:
        libvirt_free_space: '{{ libvirt_df_result.stdout_lines | last }}'

    - name: calculate cluster configuration hardware demands
      ansible.builtin.set_fact:
        total_cpu_cores_required: '{{ (openshift_master_number_of_cpus * (cluster_number_of_masters | default(3, true)) + openshift_worker_number_of_cpus * cluster_number_of_workers) / soundness_check_cpu_overcommit_factor }}'
        total_memory_required: '{{ openshift_master_memory_size * (cluster_number_of_masters | default(3, true)) + openshift_worker_memory_size * cluster_number_of_workers }}'
        min_required_disk_space: '{{ (openshift_master_root_volume_size * (cluster_number_of_masters | default(3, true)) + openshift_worker_root_volume_size * cluster_number_of_workers) / 5 }}'

    - name: set current number of CPU cores detected
      when: ansible_architecture is inlist(['ppc64le', 'x86_64', 'aarch64'])
      ansible.builtin.set_fact:
        total_cpu_cores_detected: '{{ ansible_processor_vcpus }}'

    - name: set current number of CPU cores detected
      when: ansible_architecture == 's390x'
      ansible.builtin.set_fact:
        total_cpu_cores_detected: '{{ ansible_processor_cores }}'

    - name: ensure that the hardware demands can be met by the KVM host
      ansible.builtin.assert:
        that:
          - 'ansible_memtotal_mb > total_memory_required | int'
          - 'total_cpu_cores_detected | int >= total_cpu_cores_required | int'
          - 'libvirt_free_space | int >= min_required_disk_space | int'
        fail_msg: |-
          "The KVM host does not meet the hardware demands required by your OpenShift cluster configuration."
          "Make sure the host has at least:"
          "{{ total_memory_required | int }} MB of RAM available (current: {{ ansible_memtotal_mb }} MB)"
          "{{ total_cpu_cores_required | int }} CPU cores available (current: {{ total_cpu_cores_detected | int }} CPU cores)"
          "{{ min_required_disk_space | int | human_readable(unit='G') }} free disk space available at /var/lib/libvirt (current: {{ libvirt_free_space | int | human_readable(unit='G') }})"

- name: ensure KVM host isn't using incompatible OS-level packages
  when: skip_libvirt_soundness_check is not defined
  block:
    - name: fetch RPM package facts
      ansible.builtin.package_facts:
        manager: auto

    # see: https://bugzilla.redhat.com/show_bug.cgi?id=2038812
    - name: ensure that the KVM host has a compatible version of libvirt installed
      when: "'libvirt' in ansible_facts.packages"
      ansible.builtin.assert:
        that:
          - ansible_facts.packages['libvirt'][0]['release'] is not startswith('37.1.module')
        fail_msg: |-
          "The KVM host has a version of libvirt installed that is known to be incompatible with OpenShift:"
          "{{ ansible_facts.packages['libvirt'][0]['name'] }}-{{ ansible_facts.packages['libvirt'][0]['version'] }}-{{ ansible_facts.packages['libvirt'][0]['release'] }}"
          "Follow these instructions in the troubleshooting guide to resolve the issue:"
          "https://github.com/ibm-s390-cloud/ocp-kvm-ipi-automation/blob/main/docs/TROUBLESHOOTING.md#using-an-incompatible-libvirt-version"
