---

- name: account for known prerequisite software package incompatibilities
  block:
    - name: fetch RPM package facts
      ansible.builtin.package_facts:
        manager: auto

    # see: https://bugzilla.redhat.com/show_bug.cgi?id=2038812
    - name: automatically downgrade incompatible version of libvirt package
      ansible.builtin.command:
        cmd: 'yum downgrade -y libvirt'
      when:
        - "'libvirt' in ansible_facts.packages"
        - ansible_facts.packages['libvirt'][0]['release'] is startswith('37.1.module')

    - name: install python3-dnf-plugin-versionlock package
      ansible.builtin.dnf:
        name:
          - python3-dnf-plugin-versionlock
        state: present

    - name: exclude known incompatible software packages from installation
      community.general.dnf_versionlock:
        name:
          - libvirt*6.0.0-37.1.* # see: https://bugzilla.redhat.com/show_bug.cgi?id=2038812
        state: excluded

- name: disable swap permanently (if needed)
  when:
    - ansible_memory_mb["swap"] is defined
    - ansible_memory_mb["swap"]["total"] > 0
  block:
    - name: get /usr/lib/systemd/zram-generator.conf file stats
      ansible.builtin.stat:
        path: '/usr/lib/systemd/zram-generator.conf'
      register: zram_generator_conf_file_info

    - name: truncate /usr/lib/systemd/zram-generator.conf file
      when: zram_generator_conf_file_info.stat.exists
      ansible.builtin.file: # noqa args[module]
        path: /usr/lib/systemd/zram-generator.conf
        state: '{{ item }}'
        owner: root
        group: root
        mode: '0644'
      loop:
        - absent
        - touch

    - name: turn off swap completely
      ansible.builtin.command:
        cmd: 'swapoff -a'

    - name: disable swap in /etc/fstab
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
        replace: '#\1\2\3swap\4'
        backup: true

    - name: reboot host
      ansible.builtin.include_tasks: '{{ inventory_dir }}/tasks/reboot_host.yml'

- name: install prerequisite software packages
  vars:
    os_version: '{{ (ansible_distribution_version | parse_version)["major"] | string + "_" + (ansible_distribution_version | parse_version)["minor"] | string }}'
  ansible.builtin.dnf:
    name: '{{ item }}'
    state: present
  loop:
    - '{{ os_packages[os_version]["groups"] }}'
    - '{{ os_packages[os_version]["modules"] }}'
    - '{{ os_packages[os_version]["rpms"] }}'

- name: install optional software packages
  when:
    - install_optional_sw is defined
    - install_optional_sw
  block:
    - name: install packages applicable to all host architectures
      ansible.builtin.dnf:
        name:
          - 'https://tcping-multi-arch.s3.eu.cloud-object-storage.appdomain.cloud/tcping-1.0.2.{{ ansible_architecture }}.rpm'
        state: present
        disable_gpg_check: true

    - name: install packages applicable to s390x hosts only
      when: "ansible_architecture == 's390x'"
      ansible.builtin.dnf:
        name:
          - 'https://zhwmodel.s3.eu.cloud-object-storage.appdomain.cloud/zhwmodel-1.5-965b308.s390x.rpm'
        state: present
        disable_gpg_check: true

- name: install prerequisite Python packages (from source)
  vars:
    os_version: '{{ (ansible_distribution_version | parse_version)["major"] | string + "_" + (ansible_distribution_version | parse_version)["minor"] | string }}'
  ansible.builtin.include_tasks: '{{ role_path }}/tasks/install_python_packages.yml'
  loop:
    - '{{ python_packages[os_version]["essential"] }}'
    - '{{ python_packages[os_version]["required"] }}'
  loop_control:
    loop_var: python_prereq_packages

- name: install yq
  block:
    - name: create temporary download directory
      ansible.builtin.tempfile:
        state: directory
        suffix: yq
      register: temp_dir

    - name: download yq binary
      ansible.builtin.get_url:
        url: 'https://github.com/mikefarah/yq/releases/download/v{{ yq_version }}/yq_linux_{{ architecture_alias }}'
        dest: '{{ temp_dir.path }}/yq_linux_{{ yq_version }}'
        mode: '0440'
        timeout: 120

    - name: remove existing yq installation
      ansible.builtin.file:
        path: '/usr/local/bin/yq'
        state: absent

    - name: install yq
      ansible.builtin.copy:
        src: '{{ temp_dir.path }}/yq_linux_{{ yq_version }}'
        dest: /usr/local/bin/yq
        owner: root
        group: root
        mode: '0755'
        remote_src: true
  always:
    - name: delete temporary download directory
      ansible.builtin.file:
        path: '{{ temp_dir.path }}'
        state: absent
      when: temp_dir.path is defined

- name: install go compiler
  block:
    - name: create temporary download directory
      ansible.builtin.tempfile:
        state: directory
        suffix: golang
      register: temp_dir

    - name: download go tarball
      ansible.builtin.get_url:
        url: 'https://dl.google.com/go/go{{ go_version }}.linux-{{ architecture_alias }}.tar.gz'
        dest: '{{ temp_dir.path }}/go{{ go_version }}.tar.gz'
        mode: '0440'
        timeout: 120

    - name: remove existing go installation
      ansible.builtin.file:
        path: '/usr/local/go'
        state: absent

    - name: install go
      ansible.builtin.unarchive:
        src: '{{ temp_dir.path }}/go{{ go_version }}.tar.gz'
        dest: /usr/local
        remote_src: true

    - name: add go to path
      ansible.builtin.copy:
        src: '{{ role_path }}/files/golang.profile.sh'
        dest: /etc/profile.d/golang.sh
        owner: root
        group: root
        mode: '0644'
  always:
    - name: delete temporary download directory
      ansible.builtin.file:
        path: '{{ temp_dir.path }}'
        state: absent
      when: temp_dir.path is defined

- name: compile and install terraform
  when:
    - install_optional_sw is defined
    - install_optional_sw
  block:
    - name: create temporary download directory
      ansible.builtin.tempfile:
        state: directory
        suffix: terraform
      register: temp_dir

    - name: fetch terraform source code
      ansible.builtin.git:
        repo: 'https://github.com/hashicorp/terraform.git'
        dest: '{{ temp_dir.path }}/terraform'
        version: 'v{{ terraform_version }}'
        single_branch: true
        depth: 1

    - name: build terraform binary
      ansible.builtin.command:
        cmd: 'go build'
        chdir: '{{ temp_dir.path }}/terraform'
      environment:
        GOPATH: '{{ temp_dir.path }}/go'
        PATH: '{{ ansible_env.PATH }}:/usr/local/go/bin:{{ temp_dir.path }}/go/bin'
      async: 600
      poll: 10

    - name: remove existing terraform binary from /usr/local/bin
      ansible.builtin.file:
        path: /usr/local/bin/terraform
        state: absent

    - name: copy terraform binary to /usr/local/bin
      ansible.builtin.copy:
        src: '{{ temp_dir.path }}/terraform/terraform'
        dest: /usr/local/bin/terraform
        owner: root
        group: root
        mode: '0755'
        remote_src: true
  always:
    - name: delete temporary download directory
      ansible.builtin.file:
        path: '{{ temp_dir.path }}'
        state: absent
      when: temp_dir.path is defined

- name: compile and install various terraform providers
  when:
    - install_optional_sw is defined
    - install_optional_sw
  block:
    - name: create temporary download directory
      ansible.builtin.tempfile:
        state: directory
        suffix: tfproviders
      register: temp_dir

    - name: compile and install terraform provider
      vars:
        tfprovider_temp_dir: '{{ temp_dir }}'
      ansible.builtin.include_tasks: '{{ role_path }}/tasks/install_terraform_providers.yml'
      loop:
        - { 'name': 'terraform-provider-ibm', 'git_url': 'https://github.com/IBM-Cloud/terraform-provider-ibm.git', 'version': '{{ terraform_ibm_provider_version }}', 'path': 'ibm-cloud/ibm/{{ terraform_ibm_provider_version }}/linux_{{ architecture_alias }}' }
        - { 'name': 'terraform-provider-libvirt', 'git_url': 'https://github.com/dmacvicar/terraform-provider-libvirt.git', 'version': '{{ terraform_libvirt_provider_version }}', 'path': 'dmacvicar/libvirt/{{ terraform_libvirt_provider_version }}/linux_{{ architecture_alias }}' }
      loop_control:
        loop_var: tfprovider
  always:
    - name: delete temporary download directory
      ansible.builtin.file:
        path: '{{ temp_dir.path }}'
        state: absent
      when: temp_dir.path is defined

- name: install helm
  when:
    - install_optional_sw is defined
    - install_optional_sw
  block:
    - name: create temporary download directory
      ansible.builtin.tempfile:
        state: directory
        suffix: helm
      register: temp_dir

    - name: download helm tarball
      ansible.builtin.get_url:
        url: 'https://get.helm.sh/helm-v{{ helm_version }}-linux-{{ architecture_alias }}.tar.gz'
        dest: '{{ temp_dir.path }}/helm-v{{ helm_version }}.tar.gz'
        mode: '0440'
        timeout: 120

    - name: remove existing helm binary from /usr/local/bin
      ansible.builtin.file:
        path: /usr/local/bin/helm
        state: absent

    - name: copy helm binary to /usr/local/bin
      ansible.builtin.unarchive:
        src: '{{ temp_dir.path }}/helm-v{{ helm_version }}.tar.gz'
        dest: /usr/local/bin
        remote_src: true
        owner: root
        group: root
        mode: '0755'
        extra_opts:
          - --transform
          - 's/^linux-{{ architecture_alias }}//'
        exclude:
          - 'linux-{{ architecture_alias }}/README.md'
          - 'linux-{{ architecture_alias }}/LICENSE'
  always:
    - name: delete temporary download directory
      ansible.builtin.file:
        path: '{{ temp_dir.path }}'
        state: absent
      when: temp_dir.path is defined

- name: compile and install butane
  when:
    - install_optional_sw is defined
    - install_optional_sw
  block:
    - name: create temporary download directory
      ansible.builtin.tempfile:
        state: directory
        suffix: butane
      register: temp_dir

    - name: fetch butane source code
      ansible.builtin.git:
        repo: 'https://github.com/coreos/butane.git'
        dest: '{{ temp_dir.path }}/butane'
        version: 'v{{ butane_version }}'
        single_branch: true
        depth: 1

    - name: build butane binary
      ansible.builtin.command:
        cmd: './build'
        chdir: '{{ temp_dir.path }}/butane'
      environment:
        GOPATH: '{{ temp_dir.path }}/go'
        PATH: '{{ ansible_env.PATH }}:/usr/local/go/bin:{{ temp_dir.path }}/go/bin'
      async: 600
      poll: 10

    - name: remove existing butane binary from /usr/local/bin
      ansible.builtin.file:
        path: /usr/local/bin/butane
        state: absent

    - name: copy butane binary to /usr/local/bin
      ansible.builtin.copy:
        src: '{{ temp_dir.path }}/butane/bin/{{ architecture_alias }}/butane'
        dest: /usr/local/bin/butane
        owner: root
        group: root
        mode: '0755'
        remote_src: true
  always:
    - name: delete temporary download directory
      ansible.builtin.file:
        path: '{{ temp_dir.path }}'
        state: absent
      when: temp_dir.path is defined
