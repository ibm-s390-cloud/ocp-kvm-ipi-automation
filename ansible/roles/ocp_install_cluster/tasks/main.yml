---

- name: make sure the haproxy service is started
  ansible.builtin.service:
    name: haproxy
    state: started
    enabled: true

- name: configure the OpenShift image cache (if feasible)
  when: image_cache is defined
  ansible.builtin.include_tasks: '{{ role_path }}/tasks/configure_ocp_image_cache.yml'

- name: set required facts
  block:
    - name: check the required SSH key files exist on the KVM host
      ansible.builtin.stat:
        path: '{{ item }}'
      register: ssh_key_file_info
      failed_when: not ssh_key_file_info.stat.exists
      loop:
        - '{{ openshift_installer_workdir }}/id_ssh_ocp'
        - '{{ openshift_installer_workdir }}/id_ssh_ocp.pub'

    - name: fetch cluster image pull secret (from the Ansible controller)
      ansible.builtin.set_fact:
        pull_secret_file: '{{ lookup("file", cluster_pull_secret_file) | string }}'

    - name: fetch SSH key to use with cluster nodes
      ansible.builtin.slurp:
        src: '{{ openshift_installer_workdir }}/id_ssh_ocp.pub'
      register: ocp_ssh_key_pub

    - name: determine OpenShift image to install
      ansible.builtin.shell:
        cmd: "curl -s {{ openshift_release_url }} | sed -n -e 's/^.*Pull From: //p'"
      register: openshift_release_image
      failed_when:
        - openshift_release_image.rc != 0
        - openshift_release_image.stdout | length == 0

    - name: generate list of master manifests
      ansible.builtin.set_fact:
        master_manifests: '{{ (master_manifests | default([])) + ["99_openshift-cluster-api_master-machines-" + item | string + ".yaml"] }}'
      loop: '{{ range(0, (cluster_number_of_masters | default(3, true)) | int, 1) | list }}'

- name: create OpenShift installation manifests
  block:
    - name: put the OpenShift installation configuration file in place
      ansible.builtin.template:
        src: '{{ role_path }}/templates/install-config.yaml.j2'
        dest: '{{ openshift_installer_workdir }}/install-config.yaml'
        owner: root
        group: root
        mode: '0644'

    - name: remove blank lines from OpenShift installation configuration file
      ansible.builtin.lineinfile:
        path: '{{ openshift_installer_workdir }}/install-config.yaml'
        state: absent
        regexp: '^\s*$'

    - name: create backup of OpenShift installation configuration file (for debugging purposes)
      ansible.builtin.copy:
        src: '{{ openshift_installer_workdir }}/install-config.yaml'
        dest: '{{ openshift_installer_workdir }}/install-config.yaml.bkup'
        owner: root
        group: root
        mode: '0644'
        remote_src: true

    - name: remove existing manifests
      ansible.builtin.file:
        path: '{{ item }}'
        state: absent
      loop:
        - '{{ openshift_installer_workdir }}/manifests'
        - '{{ openshift_installer_workdir }}/openshift'

    - name: set local installation file download URL
      ansible.builtin.set_fact:
        openshift_rhcos_image_url_local: 'http://{{ ansible_default_ipv4.address }}:8080/bootfiles/{{ openshift_rhcos_image_url | basename }}'

    - name: generate manifests using openshift-install binary
      ansible.builtin.command:
        cmd: '/usr/local/bin/openshift-install create manifests --dir={{ openshift_installer_workdir }}'
      environment:
        OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE: '{{ openshift_release_image.stdout }}'
        OPENSHIFT_INSTALL_OS_IMAGE_OVERRIDE: '{{ openshift_rhcos_image_url_local }}'

    - name: check if manifests have been created successfully
      block:
        - name: get common manifest file stats
          ansible.builtin.stat:
            path: '{{ item }}'
          register: file_info
          failed_when: not file_info.stat.exists
          loop:
            - '{{ openshift_installer_workdir }}/manifests'
            - '{{ openshift_installer_workdir }}/openshift'
            - '{{ openshift_installer_workdir }}/openshift/99_openshift-cluster-api_worker-machineset-0.yaml'

        - name: get master nodes manifest file stats
          ansible.builtin.stat:
            path: '{{ openshift_installer_workdir }}/openshift/{{ item }}'
          register: file_info
          failed_when: not file_info.stat.exists
          loop: '{{ master_manifests }}'

    - name: create backup of manifests (for debugging purposes)
      ansible.posix.synchronize:
        src: '{{ item }}'
        dest: '{{ item }}.bkup'
      delegate_to: '{{ inventory_hostname }}'
      loop:
        - '{{ openshift_installer_workdir }}/manifests'
        - '{{ openshift_installer_workdir }}/openshift'

- name: patch generated OpenShift manifests to accommodate custom cluster resource needs
  block:
    - name: slurp worker configuration from manifest file
      ansible.builtin.slurp:
        src: '{{ openshift_installer_workdir }}/openshift/99_openshift-cluster-api_worker-machineset-0.yaml'
      register: worker_machineset

    - name: store worker configuration into a dedicated fact
      ansible.builtin.set_fact:
        openshift_worker_config: '{{ worker_machineset["content"] | b64decode | trim | from_yaml }}'

    - name: update worker configuration
      ansible.utils.update_fact:
        updates:
          - path: openshift_worker_config.spec.template.spec.providerSpec.value.volume.volumeSize
            value: '{{ openshift_worker_root_volume_size }}'
          - path: openshift_worker_config.spec.template.spec.providerSpec.value.domainMemory
            value: '{{ openshift_worker_memory_size }}'
          - path: openshift_worker_config.spec.template.spec.providerSpec.value.domainVcpu
            value: '{{ openshift_worker_number_of_cpus }}'
      register: updated

    - name: write back worker configuration to manifest file
      ansible.builtin.copy:
        dest: '{{ openshift_installer_workdir }}/openshift/99_openshift-cluster-api_worker-machineset-0.yaml'
        content: '{{ updated.openshift_worker_config | to_nice_yaml }}'
        backup: true
        owner: root
        group: root
        mode: '0644'

    - name: update master manifests
      ansible.builtin.include_tasks: '{{ role_path }}/tasks/update_master_configuration.yml'
      loop: '{{ master_manifests }}'
      loop_control:
        loop_var: manifest
        index_var: master_node_index

- name: put files for advanced cluster configuration in place
  ansible.builtin.include_tasks: '{{ role_path }}/tasks/copy_advanced_configuration_files.yml'
  loop:
    - { 'name': 'cluster-network-03-config.yml', 'dest': '{{ openshift_installer_workdir }}/manifests/cluster-network-03-config.yml' }
    - { 'name': '99_node-cgroups-v2.yml', 'dest': '{{ openshift_installer_workdir }}/openshift/99_node-cgroups-v2.yml' }
  loop_control:
    loop_var: advanced_config_file

- name: determine name of to-be-created cluster from installation log
  ansible.builtin.include_tasks: '{{ inventory_dir }}/tasks/get_cluster_name.yml'

- name: run cluster installation
  block:
    - name: start system performance monitor data collection (s390x only)
      vars:
        collect_data_args: '{{ "-p" if collect_perf_data == "nmon" else "" }}'
      when:
        - "ansible_architecture == 's390x'"
        - collect_perf_data is defined
        - collect_perf_data is inlist(["nmon", "njmon"])
      ansible.builtin.command:
        cmd: '/usr/local/bin/{{ collect_perf_data }} -f -s 10 -c 720 -m {{ openshift_installer_workdir }} {{ collect_data_args }}'
      register: collect_data_process

    - name: trigger cluster installation using openshift-install binary
      ansible.builtin.command:
        cmd: '/usr/local/bin/openshift-install create cluster --dir={{ openshift_installer_workdir }}'
      environment:
        OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE: '{{ openshift_release_image.stdout }}'
        OPENSHIFT_INSTALL_OS_IMAGE_OVERRIDE: '{{ openshift_rhcos_image_url }}'
      async: 3600
      poll: 0
      register: cluster_install

    - name: handle libvirt cluster network update
      block:
        - name: wait until libvirt cluster network has been created
          community.libvirt.virt_net:
            command: list_nets
          register: libvirt_networks
          until: cluster_id in libvirt_networks.list_nets
          retries: 120
          delay: 30

        - name: create temporary directory
          ansible.builtin.tempfile:
            state: directory
            suffix: libvirtnet
          register: temp_dir

        - name: create libvirt cluster network update file
          ansible.builtin.template:
            src: '{{ role_path }}/templates/libvirt_network_dns_xml.j2'
            dest: '{{ temp_dir.path }}/libvirt_network_dns.xml'
            owner: root
            group: root
            mode: '0644'

        - name: add DNS records to the libvirt cluster network
          ansible.builtin.command:
            cmd: 'virsh net-update --network {{ cluster_id }} --command add-last --section dns-host --xml {{ temp_dir.path }}/libvirt_network_dns.xml --live --config'
      always:
        - name: delete temporary directory
          ansible.builtin.file:
            path: '{{ temp_dir.path }}'
            state: absent
          when: temp_dir.path is defined

    - name: copy kubeconfig file to enable OpenShift client tooling
      block:
        - name: create directory /root/.kube
          ansible.builtin.file:
            path: ~root/.kube
            owner: root
            group: root
            mode: '0755'
            state: directory

        - name: copy kubeconfig file to /root/.kube
          ansible.builtin.copy:
            src: '{{ openshift_installer_workdir }}/auth/kubeconfig'
            dest: ~root/.kube/config
            owner: root
            group: root
            mode: '0600'
            remote_src: true

    - name: wait until cluster installation has finished
      ansible.builtin.async_status: # noqa args[module]
        jid: '{{ cluster_install.ansible_job_id }}'
      register: job_result
      until: job_result.finished
      retries: 120
      delay: 60
  always:
    - name: stop system performance monitor data collection (s390x only)
      when:
        - "ansible_architecture == 's390x'"
        - collect_perf_data is defined
        - collect_perf_data is inlist(["nmon", "njmon"])
        - collect_data_process is defined
      ansible.builtin.command:
        cmd: 'kill -USR2 {{ collect_data_process.stdout }}'
